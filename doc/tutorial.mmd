title: A Make Tutorial
css: doc.css
css: highlight/styles/default.css
html header: <script src="highlight/highlight.pack.js"></script>
html header: <script>hljs.initHighlightingOnLoad();</script>

# [%title]
## Let's Build Something

### The Project Files

```bash
$ ls
greet.cpp greet.hpp main.cpp
```

#### main.cpp
```c++
#include "greet.hpp"

int main(int argc, char *argv[])
{
    Greet g = new Greet("world");
    g.say("hello");
    exit(0);
}
```

Building things for most projects usually starts simply: you type the
commands by hand:

```bash
$ c++ -c -o main.o main.cpp     # compile the main program
$ c++ -c -o greet.o greet.cpp   # compile the class that does everything else
$ c++ -o greet main.o greet.o   # link them together
```
This sequence of commands can be saved in a file, so building the
project reduces to:

```bash
$ sh build.sh
```

There's some repetition there; the command to build a "```.o```" file is
the same for each source file.


```make
%.o:	%.cpp
	c++ -c -o $@ $?

greet:	main.o greet.o
	c++ -o $@
```
## Pattern Rules
## Deriving Values
## Directories for Targets
## Cleanup
## Installation
## Subdirectories
## Other File Types
