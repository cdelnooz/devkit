title: Devkit
css: doc.css
css: file:///usr/local/lib/www/highlight/styles/default.css
html header: <script src="file:///usr/local/lib/www/highlight/highlight.pack.js"></script>
html header: <script>hljs.initHighlightingOnLoad();</script>

# [%title]

## Makefile Conventions
The *Makefile Conventions* section of the *GNU make* manual describes
several features that are typical of **make** as used to build GNU software.
Devkit makes it easy to support those conventions:

 * special handling for **make**'s standard targets
 * automatic definition of of **make**'s standard directories
 * pattern rules for installing a projects artefacts into the standard directories.

### Standard Targets
**make** defines the following "standard" targets:

 * ```all``` --build all artefacts (also, ```build```)
 * ```install``` --build and install everything to their location(s) for use
 * ```clean``` --delete files created in the normal process of building
 * ```distclean``` --delete everything else
 * ```tags``` --build a tags database of program symbols
 * ```check``` --perform self tests (also ```test```).

The summaries above are a simplification of these targets meanings,
see the *GNU make* manual for full details.  **make** defines even more
targets than these, but they're of m

 * automatically recursive
 * behaviour depends on language
 * makefiles can do this too.  In fact, "install" is intended for exactly this purpose.

### Standard Directories

 * DESTDIR, prefix
 * usr, opt
 * FSHS

### Pattern Rules

## Customisation

### Scoped Variables
#### TARGET, LOCAL, PROJECT
### OS
### ARCH
### SRC_LANG
### PROJECT

## Help and Debugging
Because building things with **make** is declarative, not procedural, it
can at times be difficult to see how and why **make** has chosen to take
some particular actions.  Devkit provides some special targets and
logging variables to help reveal what's happening.

### +vars
The ```+vars``` target echoes a list of all the variables defined in
**make**.  It's a big list -- it'll include *all* the variables
defined in the environment, from the **make** command invocation, as
well as the variables defined in the makefiles themselves.  However,
it's straightforward to filter items of interest.

E.g., to show the variables that define ways of using install:

```bash
$ make +vars | grep install
INSTALL='install -D'
INSTALL_DIRECTORY='install -D -d'
INSTALL_FILE='install -D -m 644'
INSTALL_PROGRAM='install -D -m 755'
```

Devkit also defines a pattern target for showing a single variable:
```+var[%]```.  E.g.:

```bash
$ make +var[CC] +var[AR] +var[libdir]
CC='gcc'
AR='ar'
libdir='//usr/local///lib/'
```
If the ```ECHO``` variable is defined as "echo", the origin of each
variable is displayed as a comment:

```bash
$ make +var[CC] +var[AR] +var[libdir] ECHO=echo
# environment variable "CC":
CC='gcc'
# default variable "AR":
AR='ar'
# file variable "libdir":
libdir='//usr/local///lib/'
```

```ECHO``` is described in more detail below.

### +help
TBD

### +features

**Make** may be built with a number of optional features. It defines
a special variable, ```.FEATURES```, that describes which are active.

```bash
$ make +var[.FEATURES]
.FEATURES='target-specific order-only second-expansion else-if archives jobserver check-symlink'
```

As a convenience, Devkit also defines a special target for this variable:

```bash
$ make +features
target-specific order-only second-expansion else-if archives jobserver check-symlink
```

### +dirs
TBD

### +stddirs
Devkit defines a target to show the values of **make**'s "standard"
installation directories.

```bash
$ make +stddirs
DESTDIR:
prefix:         /usr/local
opt:
usr:
subdir:
archdir:        darwin-x86_64
rootdir:        //usr/local
bindir:         //usr/local///bin
sbindir:        //usr/local///sbin
libexecdir:     //usr/local///libexec/
datadir:        //usr/local///share/
sysconfdir:     //usr/local/etc//
divertdir:      //usr/local/var/lib/divert/
sharedstatedir: //usr/local//com/
localstatedir:  //usr/local/var//
srvdir:         //usr/local/srv/
wwwdir:         //usr/local/srv/www/
libdir:         //usr/local///lib/
infodir:        //usr/local//info
lispdir:        //usr/local//share/emacs/site-lisp
includedir:     //usr/local///include/
mandir:         //usr/local///share//man
```

Note that the paths shown here have empty path elements (e.g. "//").
This is because these paths are defined  in terms of several other
variables, ```DESTDIR```, ```prefix```, ```opt``` and ```usr```, and
some of these may be unset.  That's not a problem in most cases
because empty path elements are simply ignored.  However, **make**
running in a *Cygwin* context (a Unix compatibility system for
Microsoft OSes) will treat two leading slashes (e.g. "//some/file/path")
specially and incorrectly as a UNC path.

### ECHO
Devkit defines a variable ```ECHO``` that is used for general logging.
By default it is defined as ":", the **sh** null command, but may be
redefined to any command that accepts arbitrary arguments.

Typical usage is to define ```ECHO``` as the **echo** command, when
invoking *make*:

```bash
$ make install ECHO=echo
++ /Users/timmo/github/devkit pre-install older-than
++ /Users/timmo/github/devkit install@bin older-than pre-install
++ make: recursively building install@bin
/Users/timmo/github/devkit/bin
++ /Users/timmo/github/devkit/bin pre-install older-than
++ /Users/timmo/github/devkit/bin install older-than //usr/local///bin/echo+ //usr/local///bin/mk-ar-merge //usr/local///bin/mk-ar //
...
```

#### ECHO_TARGET
In fact, the ```ECHO``` variable is mostly used by the
```ECHO_TARGET``` variable, which in turn is used to log the context
of resolving a target.  The format of the ```ECHO_TARGET``` message
is:

```
++ <directory> <target> older-than <prequisites>...
```

This format is intended to be easier to parse and post-process than
**make**'s debug output.
