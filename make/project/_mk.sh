#!/bin/sh
#
# _MK.SH	--Create the fallback ".mk" file for the OS directory
#
# Remarks:
# Consider using these flags too, if/when they're available...
#    -Wuseless-cast
#    -Wzero-as-null-pointer-constant
#    -Wlogical-op
#    -Wnoexcept
#     -Wstrict-null-sentinel
#
# See Also:
# http://stackoverflow.com/questions/5088460/flags-to-enable-thorough-and-verbose-g-warnings/9862800#9862800
#
cpp_flags=$(cat <<EOF
    -Wctor-dtor-privacy \\
    -Weffc++ \\
    -Winit-self \\
    -Wno-variadic-macros \\
    -Wold-style-cast \\
    -Woverloaded-virtual
EOF
)
c_flags=$(cat <<EOF
    -Waggregate-return \\
    -Wcast-align \\
    -Wcast-qual \\
    -Wdisabled-optimization \\
    -Wformat=2 \\
    -Wimplicit \\
    -Wmissing-declarations \\
    -Wmissing-include-dirs \\
    -Wmissing-prototypes \\
    -Wnested-externs \\
    -Wpointer-arith \\
    -Wredundant-decls \\
    -Wshadow \\
    -Wsign-conversion \\
    -Wsign-promo \\
    -Wstack-protector \\
    -Wstrict-overflow=5 \\
    -Wstrict-prototypes \\
    -Wswitch-enum \\
    -Wswitch-default \\
    -Wundef \\
    -Wwrite-strings
EOF
)


date=$(date)
cat <<EOF
#
# PROJECT-.MK	--Default customisations for a project.
#
# Remarks:
# The project include file defines overall customisations for existing
# rules. This is the "no-project" project, which contains some default
# settings to consider as a template.
#
# Do not edit this file!
# It was automatically generated on $date
#
PROJECT.C_DEFS =
PROJECT.C++_DEFS =

PROJECT.CFLAGS = -std=c99 -O
PROJECT.C_WARN_FLAGS = -pedantic -Wall -Wextra $c_flags
PROJECT.CXXFLAGS = -std=c++0x -O
PROJECT.C++_WARN_FLAGS = -pedantic -Wall -Wextra $cpp_flags $c_flags
EOF
