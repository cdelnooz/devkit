#!/bin/sh
#
# TAP.SHL --Test-Anything-Protocol functions.
#
# Remarks:
# This library is an implementation Perl's TAP system for shell scripts.
# TODO: skip
#
# Contents:
# tty_filter()    --Filter stdout suitably/conditionally for a tty.
# caller()        --Fallback implementation of bash's caller().
# tap_exit()      --(Fallback) user exit function.
# diag()          --Print diagnostic lines as TAP comments.
# TAP_BEGIN()     --Startup code for the TAP module, print TAP prologue.
# TAP_EXIT_TRAP() --Write a test summary as TAP epilogue, and set exit status.
# plan()          --Declare the number of tests.
# todo()          --Mark the start/end of a "todo" block.
# tap_test_msg()  --Common function to report on tests.
# ok()            --Check a process result, and emit TAP output.
# nok()           --Check a process result, and emit TAP output.
#
. test-more.shl
version=local.latest
tap_test=0
tap_todo_reason=
tap_plan=
tap_fail=0
tap_version="${version}"
TAP_COLORS=${TAP_COLORS:-"ok=:fail=31:plan=1:diag=2"}

#
# tty_filter() --Filter stdout suitably/conditionally for a tty.
#
# Parameters:
# style	--the preferred output styling, as an ANSI mode arg (e.g. "1;33")
#
# Remarks:
# it seems everyone wants colour, so here's an attempt at it.  This
# routine is run as a filter, reading stdin and "wrapping" them
# in ANSI X3.64 commands for altering the colour.
#
tty_filter()
{
    local style=$1; shift

    if [ "$style" ]; then
        printf "\033[%sm" "$style"
	cat
        printf "\033[m"
    else
        cat
    fi
}

#
# caller() --Fallback implementation of bash's caller().
#
# Remarks:
# tap.shl uses bash's caller() builtin to provide file/line context
# information.  The dash shell doesn't implement this, so we fake up a
# function that will at least return something syntactically similar.
#
if ! type caller >/dev/null; then
    caller() { printf '(unknown) unknown (input)\n'; }
fi

#
# tap_exit() --(Fallback) user exit function.
#
# Remarks:
# This routine is called by TAP_EXIT_TRAP().  The function defined
# here is a do-nothing fallback, but may be redefined as needed.
#
# TODO: better trap handling for tap?
#
if ! type tap_exit >/dev/null 2>&1; then
    tap_exit() { :; }
fi

#
# diag() --Print diagnostic lines as TAP comments.
#
# Remarks:
# If any arguments are provided, they are passed on to printf,
# and that's what gets output.  If there are no arguments, cat
# is used to passthrough the lines of text.
#
diag()
{
    if [ $# -gt 0 ]; then
        printf "$@"
	printf "\n"
    else
	cat
    fi | sed -e "s/^/# "/ | tty_filter "$diag_style"
}

#
# TAP_BEGIN() --Startup code for the TAP module, print TAP prologue.
#
TAP_BEGIN()
{
    if [ -t 1 ]; then		# stdout is a tty: setup ANSI X3.64 styles
	eval $(
            IFS=:
	    for level in $TAP_COLORS; do
		echo $level | sed -e 's/=/_style="/' -e 's/$/"/'
	    done
	 )
    fi
    diag 'current time local: %s' "$(date)" # output preamble
    diag 'current time UTC:   %s' "$(TZ=UTC date)"
    diag 'tap.shl version:    %s' "$tap_version"
    trap TAP_EXIT_TRAP 0	# enable process exit handler
}
TAP_BEGIN

#
# TAP_EXIT_TRAP() --Write a test summary as TAP epilogue, and set exit status.
#
# Remarks:
# This code must run after (and summarises) all the tests, and so it
# is installed as an exit trap by TAP_BEGIN.  It calls the function
# tap_exit(), which may be defined by the user, and sets the process
# exit status:
#
# * 0 --all tests passed
# * 1 --all tests ran, but some failed
# * 2 --not all (or too many!) tests ran
#
TAP_EXIT_TRAP()
{
    local s=			# plural-suffix
    local status=

    if [ ! "$tap_plan" ]; then
	if [ "$tap_test" -ne 0 ]; then
	    diag "Tests were run but no plan was declared."
	    status=2
	fi
    elif [ $tap_test != "$tap_plan" ]; then
	s=; test "$tap_plan" != "1" && s=s
	diag "Looks like you planned %d test%s but ran %d." \
	    "$tap_plan" "$s"  "$tap_test"
	status=2
    fi
    if [ "$tap_fail" -ne 0 ]; then
	s=; test $tap_fail -gt 1 && s=s
	diag "Looks like you failed %d test%s of %d run." \
	"$tap_fail" "$s" "$tap_test"
	status=${status:-1}
    fi
    if ! tap_exit; then
	status=$?
	diag "Looks like your exit handler failed"
    fi
    exit ${status:-0}
}

#
# plan() --Declare the number of tests.
#
# Remarks:
# TAP uses the declared plan to determine if there where any
# catastrophic failures (e.g. if the suite crashed after a few passing
# tests).  The plan *should* be output first, however the protocol
# allows the plan to come at the end of the tests.
#
plan()
{
    if [ $# -ne 0 ]; then
	tap_plan=$1
    else
	tap_plan=$tap_test
    fi
    echo "1..$tap_plan" | tty_filter "$plan_style"
}

#
# todo() --Mark the start/end of a "todo" block.
#
# Remarks:
# This function can be used in two ways: as a delimited block, or as a
# command modifier (like nice, nohup etc.). e.g.:
#
#     todo "not implemented yet"
#     ok 1 "some test"
#     todo
#
#     todo "not implemented yet" ok 1 "some test"
#
todo()
{
    case "$#" in
	(1)			# begin block: remember reason
	    tap_todo_reason="$1"
	    ;;
	(0)			# end of block: clear todo reason
	    tap_todo_reason=
	    ;;
	(*)			# command modifier
	    local tap_todo_reason="$1"; shift
	    "$@"
	    ;;
    esac
}

#
# tap_test_msg() --Common function to report on tests.
#
# Parameters:
# result	--the test result (0: success, other: failure)
# ...		--printf arg.s
#
tap_test_msg()
{
    local result=$1; shift
    local type=
    local msg=
    local msg_suffix=
    local caller_level=${caller_level:-1}
    local status=ok
    local style=$ok_style

    tap_test=$(( $tap_test + 1))

    if [ $# -gt 0 ]; then
	if [ $# -gt 1 ]; then
	    msg=$(printf "$@")
	else
	    msg=$1
	fi
	msg=" - $msg"
    fi
    if [ "$tap_todo_reason" ]; then
	type=" (TODO)"
	msg_suffix=" # TODO $tap_todo_reason"
	caller_level=$(($caller_level+1))
    fi

    if [ "$result" -ne 0 ]; then
	status="not ok"
	if [ ! "$tap_todo_reason" ]; then
            style=$fail_style
	fi
	if [ ! "$tap_todo_reason" ]; then
	    tap_fail=$(( $tap_fail + 1))
	fi
    fi
    printf '%s %d%s%s\n' "$status" $tap_test "$msg" "$msg_suffix" | tty_filter "$style"
    if [ "$result" -ne 0 ]; then
	local file=$(caller $caller_level | cut -d' ' -f3 | sed -e 's/^NULL$/(input)/')
	local line=$(caller $caller_level | cut -d' ' -f1)

	diag '   Failed%s test%s' "$type" "$msg"
	diag '   at %s line %s' "${file:-(stdin)}" "${line:-(unknown)}"
    fi
    return $result
}

#
# ok() --Check a process result, and emit TAP output.
#
ok() { tap_test_msg "$@"; }

#
# nok() --Check a process result, and emit TAP output.
#
nok()
{
   local tap_status=$1; shift

   if [ $tap_status -eq 0 ]; then
       tap_status=1;
   else
       tap_status=0;
   fi
   tap_test_msg $tap_status "$@"
}
